8. The subjects are graded as follows: (1) - 1p; (2) - 2p; (3) - 2p; (4) - 2p; (5) - 3p.

1. The variable L is initialized by (SET 'L '(T NIL T)). In order to apply a logic disjuction between elements of L, we execute (APPLY 'OR L). What is the result of evaluating this form? Justify your answer and give a solution for such a situation.

Answer:

i wrote this in common-lisp:

(defun exercise1 (l)
  (apply 'or l))

(print (exercise1 '(t nil t)))

and got an error message: COMMON-LISP:OR is a macro, not a function.

so, the result of evaluating this form is an error message.
why? because the 'or' macro cannot be used with 'apply' directly because it's a special form in common lisp and not a function. 
in this case, we should use 'reduce' or another aproach to achieve the logical disjunction. here's the corrected code using 'reduce':

(defun exercise1 (l)
  (reduce #'or l))

(print (exercise1 '(t nil t)))

the result will be 't' since there is at least one 't' in the list.


2. Given a list of integer numbers and a value N, write a Prolog program to remove from the list the elements from the positions N, 2*N, 4*N, ... . Explain the proposed algorithm. For example, for the list L = [1, 2, 3, 4, 5, 6, 7, 8] and N = 2 the result is [1, 3, 5, 6, 7].

Answer:

removeFromSpecificPositions([], _, _, []).
removeFromSpecificPositions([ElementInAGoodPosition|T], N, Position, [ElementInAGoodPosition|RestOfResult]):- N =\= Position, !, NewPosition is Position + 1, removeFromSpecificPositions(T, N, NewPosition, RestOfResult).
removeFromSpecificPositions([_|T], N, Position, RestOfResult):- NewPosition is Position + 1, NewN is N * 2, removeFromSpecificPositions(T, NewN, NewPosition, RestOfResult).

removeElements(List, N, Result):- removeFromSpecificPositions(List, N, 1, Result).

explanation: 

- removeFromSpecificPositions is the main predicate that removes elements from specific positions. It takes the input list, the value N, the current position and returns the resulting list.
- the base case checks if the input list is empty, in which case the result is also on empty list.
- there are two clauses for removeFromSpecificPositions. The first clause is used when the current position is different from N, and it adds that element to the result, increasing the position. The second clause is used when the current position is equal to N, and it skips that element, increasing the position and multiplying N by 2.
- removeElements is a wrapper predicate that initializes the position to 1 when calling the main predicate.


3. Write a Prolog program to generate the list of subsets of even length from a given list of integer numbers. Explain the proposed algorithm. For example, for the list [2, 3, 4], the result is [[], [2, 3], [2, 4], [3, 4]] (not necessarily in this order).

Answer:

lengthOfSet([], Result, Result).
lengthOfSet([_|T], Sum, Result):- NewSum is Sum + 1, lengthOfSet(T, NewSum, Result).

subsets([], []).
subsets([H|T], [H|TT]):- subsets(T, TT).
subsets([_|T], TT):- subsets(T, TT).

evenLengthSubsets(List, Result):- subsets(List, Result), lengthOfSet(Result, 0, ResultedLength), ResultedLength mod 2 =:= 0.

allSolutions(List, Result):- findall(PartialResult, evenLengthSubsets(List, PartialResult), Result).

% allSolutions([2, 3, 4], Result) => Result = [[3, 4], [2, 4], [2, 3], []]

exlanation:

- lengthOfSets is a predicate that takes a set and the initial value of 0 as parameters and returns through the variable Result the length of the given set.
- subsets is the main predicate, the one that generates all the subsets of a given set.
	- the base case checks if the list is empty, then the only sublist of it is the empty list.
	- there are 2 other clauses: the first one puts the first element in the result and the second one doesn't. this way we generate all the possible subsets.
- evenLengthSubsets is a predicate that generates a subset at a time and checks if its length is even.
- allSolutions is a predicate that returns a list of all the subsets of the provided set, as requested in the task.


4. Write a Lisp program and deduce the complexity for the following requirement. Given a linear numerical list, generate a new list with every N-th element removed. For example, for the list (1 2 3 4 5) and N = 2, the result is (1 3 5).

(defun removeElements (l n position)
  (cond
    ((null l) nil)
    ((= (mod position n) 0) (removeElements (cdr l) n (1+ position)))
    (t (cons (car l) (removeElements (cdr l) n (1+ position))))
  )
)

(defun removeElementsMultipleOfN (l n)
  (removeElements l n 1)
)

(print (removeElementsMultipleOfN '(1 2 3 4 5) 2))

- the time complexity is O(N), where N is the length of the initial list because it iterates through the list once.
- the space complexity is O(N), where N is the length of the initial list because it creates a new list in the process.


5. Write a Lisp program to determine the number of sublists at any level of a given list, having an odd number of nonnumeric atoms on even levels - the superficial level of the list is considered 1. The list processing will be done using MAP function. For example, the (A (B 2) (1 C 4) (1 (6 F)) (((G) 4) 6)) has 3 such sublists: the list, (1 (6 F)) and ((G) 4).







