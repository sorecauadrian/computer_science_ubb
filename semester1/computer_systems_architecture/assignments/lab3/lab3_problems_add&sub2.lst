     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; (b + c + d) - (a + a)
    14                                      ; a - byte
    15 00000000 01                          a db 1
    16                                      
    17                                      ; b - word
    18 00000001 0200                        b dw 2
    19                                      
    20                                      ; c - double word
    21 00000003 04000000                    c dd 4
    22                                      
    23                                      ; d - quad word
    24 00000007 0800000000000000            d dq 8
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 A0[00000000]                    mov al, [a]     ; al <- a
    30 00000005 0205[00000000]                  add al, [a]     ; al <- a + a
    31 0000000B 6698                            cbw             ; ax <- a + a
    32 0000000D 98                              cwde            ; eax <- a + a
    33 0000000E 99                              cdq             ; edx:eax <- a + a
    34 0000000F 89C1                            mov ecx, eax    
    35 00000011 89D3                            mov ebx, edx    ; ebx:ecx <- a + a
    36                                          
    37 00000013 66A1[01000000]                  mov ax, [b]     ; ax <- b
    38 00000019 98                              cwde            ; eax <- b
    39 0000001A 0305[03000000]                  add eax, [c]    ; eax <- b + c
    40 00000020 99                              cdq             ; edx:eax <- b + c
    41 00000021 0305[07000000]                  add eax, [d]
    42 00000027 1315[0B000000]                  adc edx, [d + 4]; edx:eax <- b + c + d
    43                                          
    44 0000002D 29C8                            sub eax, ecx
    45 0000002F 19DA                            sbb edx, ebx    ; edx:eax <- (b + c + d) - (a + a)
    46                                      
    47                                          ; exit(0)
    48 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
