     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 1/a + 200*b - c/(d + 1) + x/a - e
    14                                      
    15                                      ; a, b - word
    16 00000000 0100                        a dw 1
    17 00000002 0100                        b dw 1
    18                                      
    19                                      ; c, d - byte
    20 00000004 02                          c db 2
    21 00000005 01                          d db 1
    22                                      
    23                                      ; e - doubleword
    24 00000006 01000000                    e dd 1
    25                                      
    26                                      ; x - qword
    27 0000000A 0100000000000000            x dq 1
    28                                  
    29                                      ;result - auxiliar variable (double word)
    30 00000012 00000000                    result dd 0
    31                                      
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; unsigned
    36 00000000 A0[04000000]                    mov al, byte [c]; al <- c
    37 00000005 B400                            mov ah, byte 0  ; ax <- c 
    38 00000007 8A15[05000000]                  mov dl, byte [d]; dl <- d
    39 0000000D FEC2                            inc dl          ; dl <- d + 1
    40 0000000F F6F2                            div dl          ; al <- c/(d + 1)
    41 00000011 88C1                            mov cl, al      ; cl <- c/(d + 1)
    42 00000013 B500                            mov ch, byte 0
    43 00000015 66B80100                        mov ax, word 1
    44 00000019 66BA0000                        mov dx, word 0  ; dx:ax <- 1
    45 0000001D 66F735[00000000]                div word [a]    ; ax <- 1/a
    46 00000024 6689C3                          mov bx, ax      ; bx <- 1/a
    47 00000027 66B8C800                        mov ax, word 200; ax <- 200
    48 0000002B 66F725[02000000]                mul word [b]    ; dx:ax <- 200*b
    49 00000032 6601D8                          add ax, bx
    50 00000035 6683D200                        adc dx, 0       ; dx:ax <- 1/a + 200*b
    51 00000039 6629C8                          sub ax, cx
    52 0000003C 6683DA00                        sbb dx, 0       ; dx:ax <- 1/a + 200*b - c/(d + 1)
    53 00000040 66A3[12000000]                  mov [result], ax
    54 00000046 668915[14000000]                mov [result + 2], dx; result <- 1/a + 200*b - c/(d + 1)
    55                                          
    56 0000004D A1[0A000000]                    mov eax, [x]
    57 00000052 8B15[0E000000]                  mov edx, [x + 4]; edx:eax <- x
    58 00000058 BB00000000                      mov ebx, dword 0
    59 0000005D 668B1D[00000000]                mov bx, word [a]; ebx <- a
    60 00000064 F7F3                            div ebx         ; eax <- x/a
    61 00000066 2B05[06000000]                  sub eax, [e]    ; eax <- x/a - e
    62 0000006C 0305[12000000]                  add eax, [result]; eax <- 1/a + 200*b - c/(d + 1) + x/a - e
    63                                          ; exit(0)
    64 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
