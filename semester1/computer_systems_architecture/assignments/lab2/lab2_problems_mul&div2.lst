     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a, b - byte
    14 00000000 01                          a db 1
    15 00000001 01                          b db 1
    16                                      
    17                                      ; e - word
    18 00000002 0200                        e dw 2
    19                                      
    20                                      ; x - constant value
    21 00000004 02                          x db 2
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; 2 * (a + b) - e
    27                                          ; the result is going to be stored in eax
    28 00000000 66A1[04000000]                  mov ax, [x] ; ax -> 2
    29 00000006 668B15[00000000]                mov dx, [a] ; dx -> a
    30 0000000D 660315[01000000]                add dx, [b] ; dx -> a + b
    31 00000014 66F7E2                          mul dx      ; eax -> 2 * (a + b)
    32 00000017 2D[02000000]                    sub eax, e  ; eax -> 2 * (a + b) - e
    33                                          
    34 0000001C 6A00                            push dword 0; push the parameter for exit onto the stack
    35 0000001E FF15[00000000]                  call [exit] ; call exit to terminate the program
