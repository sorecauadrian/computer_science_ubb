     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 06                          d db 6
    14 00000001 0300                        e dw 3
    15 00000003 0900                        f dw 9
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 66A1[01000000]                  mov ax, [e]; ax = e
    21 00000006 6683E802                        sub ax, 2; ax = e - 2
    22 0000000A 66F725[03000000]                mul word [f]; dx:ax = f * (e - 2)
    23 00000011 6689C3                          mov bx, ax; dx:bx = f * (e - 2)
    24 00000014 A0[00000000]                    mov al, [d]
    25 00000019 2C05                            sub al, 5; al = d - 5
    26 0000001B B103                            mov cl, 3
    27 0000001D F6E1                            mul cl; ax = 3 * (d - 5)
    28 0000001F 6689C1                          mov cx, ax; cx = 3 *(d - 5)
    29 00000022 6689D8                          mov ax, bx; dx:ax = f * (e - 2)
    30 00000025 66F7F1                          div cx; ax = result (3), dx = remainder (0)
    31                                          ; exit(0)
    32 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    33 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
