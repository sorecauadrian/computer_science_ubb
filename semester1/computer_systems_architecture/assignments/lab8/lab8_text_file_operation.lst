     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, printf, fopen, fread, fclose, perror
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import fopen msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import perror msvcrt.dll
    12                                  
    13                                  segment data use32 class=data
    14 00000000 696E2E74787400              file_in db "in.txt", 0
    15 00000007 00000000                    file_descriptor_in dd 0
    16 0000000B 257300                      s_format db "%s", 0
    17 0000000E 7200                        read db "r", 0
    18 00000010 <res 0000007F>              buffer resb 127
    19                                      maximum_in_file_length equ $-buffer
    20 0000008F 4572726F7200                err db "Error", 0
    21 00000095 <res 0000001A>              frequency_vector resb 'Z' - 'A' + 1
    22 000000AF 0000                        maximum_frequency db 0, 0
    23 000000B1 0000                        uppercase_letter_with_highest_frequency db 0, 0
    24                                  
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; a text file is given. read the content of the file, determine the uppercase letter with the highest frequency and display the letter along with its frequency on the screen. the name of text file is defined
    28                                          
    29                                          ; fopen("in.txt", "r")
    30                                          ; return value of function is stored in eax
    31 00000000 68[0E000000]                    push dword read
    32 00000005 68[00000000]                    push dword file_in
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36                                          ; fopen returns 0 on error
    37                                          ; if an error occurred, we will print a message indicating that and stop
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F84B9000000                    je opening_error
    40                                          
    41                                          ; if no error, store the obtained file descriptor
    42 0000001C A3[07000000]                    mov [file_descriptor_in], eax
    43                                          
    44                                          ; frequency_vector = [0, 0, ..., 0]
    45 00000021 FC                              cld                         ; clearing the direction flag
    46 00000022 B91A000000                      mov ecx, 'Z' - 'A' + 1      ; ecx <- 'Z' - 'A' + 1
    47 00000027 B000                            mov al, 0                   ; al <- 0
    48 00000029 BF[95000000]                    mov edi, frequency_vector   ; edi <- offset(frequency_vector)
    49                                          initialization_with_0:      ; while ecx != 0
    50 0000002E AA                                  stosb                       ; [edi] <- 0, edi++
    51 0000002F E2FD                            loop initialization_with_0  ; ecx--
    52                                          
    53                                          loop1:
    54                                              ; fread(buffer, 1, maximum_in_file_length, file_descriptor_in)
    55                                              ; reads elements (1 byte and repeats that 127 times) from the file associated with descriptor 'file_descriptor_in' and stores them in 'buffer'
    56 00000031 FF35[07000000]                      push dword [file_descriptor_in]
    57 00000037 6A7F                                push maximum_in_file_length
    58 00000039 6A01                                push 1
    59 0000003B 68[10000000]                        push dword buffer
    60 00000040 FF15[00000000]                      call [fread]
    61 00000046 83C410                              add esp, 4*4
    62                                              
    63                                              ; in our case, fread returns the number of bytes read and stored in buffer
    64                                              ; essentialy, buffer is a string and eax is the length of that string
    65                                              ; the only way out of .loop is here!!!
    66                                              ; if eax is 0, either we got to the end of the file (EOF) or a reading error occurred, in both cases we close files and exit
    67 00000049 89C1                                mov ecx, eax
    68 0000004B E377                                jecxz close_file
    69                                              
    70 0000004D BE[10000000]                        mov esi, buffer
    71                                              
    72                                              .parse:
    73                                                  ; function calls can and will modify registers EAX, ECX, EDX and we are relying on ECX to loop, so we need to save it on the stack
    74 00000052 60                                      pushad
    75                                                  
    76 00000053 803E41                                  cmp byte [esi], 'A'         ; if [esi] < 'A'
    77 00000056 7210                                    jb .not_an_uppercase_letter     ; continue
    78 00000058 803E5A                                  cmp byte [esi], 'Z'         ; if [esi] > 'Z'
    79 0000005B 770B                                    ja .not_an_uppercase_letter     ; continue
    80                                                  
    81                                                  ; inc [frequency_vector + [esi] - 'A']
    82 0000005D B8[95000000]                            mov eax, dword frequency_vector
    83 00000062 0206                                    add al, byte [esi]
    84 00000064 2C41                                    sub al, byte 'A'
    85 00000066 FE00                                    inc byte [eax]
    86                                                  
    87                                                  .not_an_uppercase_letter:
    88 00000068 61                                      popad
    89 00000069 46                                      inc esi
    90 0000006A E2E6                                loop .parse
    91                                              
    92                                              ; going through the frequency_vector
    93 0000006C BE[95000000]                        mov esi, frequency_vector
    94 00000071 B91A000000                          mov ecx, 'Z' - 'A' + 1
    95                                              going_through_the_frequency_vector:
    96 00000076 8A16                                    mov dl, [esi]
    97 00000078 3A15[AF000000]                          cmp dl, byte [maximum_frequency]; if [esi] < [maximum_frequency]
    98 0000007E 7219                                    jb end_of_loop                      ; continue
    99                                  
   100 00000080 8815[AF000000]                          mov [maximum_frequency], dl     ; [maximum_frequency] <- [esi]   
   101                                                  
   102 00000086 C605[B1000000]5A                        mov [uppercase_letter_with_highest_frequency], byte 'Z'                     
   103 0000008D 280D[B1000000]                          sub [uppercase_letter_with_highest_frequency], cl
   104 00000093 FE05[B1000000]                          inc byte [uppercase_letter_with_highest_frequency]; [uppercase_letter_with_highest_frequency] <- 'Z' - ecx + 1
   105                                                  
   106                                                  end_of_loop:
   107 00000099 46                                      inc esi
   108 0000009A E2DA                                loop going_through_the_frequency_vector
   109                                                  
   110 0000009C 8005[AF000000]30                    add [maximum_frequency], byte '0'; [maximum_frequency] <- str([esi])
   111                                              
   112                                              
   113 000000A3 68[B1000000]                        push dword uppercase_letter_with_highest_frequency
   114 000000A8 FF15[00000000]                      call [printf]
   115 000000AE 83C404                              add esp, 4*1
   116                                              
   117 000000B1 68[AF000000]                        push dword maximum_frequency
   118 000000B6 FF15[00000000]                      call [printf]
   119 000000BC 83C404                              add esp, 4*1
   120 000000BF E96DFFFFFF                      jmp loop1
   121                                          
   122                                          ; all the processing is done, cleanup is all that is left
   123                                          close_file:
   124                                              ; fclose(file_descriptor_in)
   125 000000C4 FF35[07000000]                      push dword [file_descriptor_in]
   126 000000CA FF15[00000000]                      call [fclose]
   127 000000D0 83C404                              add esp, 4*1
   128 000000D3 EB0E                                jmp eop
   129                                          
   130                                          opening_error:
   131                                              ; perror(err) -> will print the err string (see data segment) and will concatenate a short error description based on the current value of the internal variable errno
   132 000000D5 68[8F000000]                        push err
   133 000000DA FF15[00000000]                      call [perror]
   134 000000E0 83C404                              add esp, 4*1
   135                                              
   136                                          eop:
   137 000000E3 6A00                            push dword 0      ; push the parameter for exit onto the stack
   138 000000E5 FF15[00000000]                  call [exit]       ; call exit to terminate the program
