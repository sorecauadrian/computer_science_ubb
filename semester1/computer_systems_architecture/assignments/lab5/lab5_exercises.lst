     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; A character string S is given. Obtain the string D that contains all capital letters of the string S.
    14 00000000 614162423225784D            S db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    15                                      lenS equ $ - S 
    16                                      
    17                                      ; D: 'A', 'B', 'M'
    18 00000008 <res 00000008>              D resb lenS
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B908000000                      mov ecx, lenS           ; ecx <- length of S
    24 00000005 BE[00000000]                    mov esi, S              ; esi <- address of S
    25 0000000A BF[08000000]                    mov edi, D              ; edi <- address of D
    26 0000000F E310                            jecxz finish            ; if ecx == 0 -> go to the end of the program
    27                                          while_ecx_not_zero:     ; while (ecx != 0)
    28 00000011 8A06                                mov al, [esi]           ; al <- value at the address esi
    29 00000013 46                                  inc esi                 ; esi++ (index of S is increasing)
    30 00000014 3C41                                cmp al, 'A'             ; if (al < 'A')
    31 00000016 7207                                jb end_of_while         ;   continue
    32 00000018 3C5A                                cmp al, 'Z'             ; if (al > 'Z')
    33 0000001A 7703                                ja end_of_while         ;   continue
    34 0000001C 8807                                mov [edi], al           ; value at the address edi <- al
    35 0000001E 47                                  inc edi                 ; edi++ (index of D is increasing)
    36                                              end_of_while:           ; the continue function (somehow)
    37 0000001F E2F0                            loop while_ecx_not_zero     ; ecx--
    38                                          finish:                 ; the end of the program
    39                                          ; exit(0)
    40 00000021 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 00000023 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
